
07-uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000618  000006ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000618  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800142  00800142  000006ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000720  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000175b  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae6  00000000  00000000  00001fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac0  00000000  00000000  00002aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00003564  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059c  00000000  00000000  00003810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c25  00000000  00000000  00003dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000049d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 40 02 	jmp	0x480	; 0x480 <__vector_18>
  4c:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 38       	cpi	r26, 0x87	; 135
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  9e:	0c 94 0a 03 	jmp	0x614	; 0x614 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_data>:
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 12a:	08 95       	ret

0000012c <lcd_gotoxy>:
 12c:	61 11       	cpse	r22, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <lcd_gotoxy+0xc>
 130:	80 58       	subi	r24, 0x80	; 128
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret
 138:	80 54       	subi	r24, 0x40	; 64
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_clrscr>:
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 146:	08 95       	ret

00000148 <lcd_putc>:
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 14e:	08 95       	ret

00000150 <lcd_puts>:
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	29 f0       	breq	.+10     	; 0x16a <lcd_puts+0x1a>
 160:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 164:	89 91       	ld	r24, Y+
 166:	81 11       	cpse	r24, r1
 168:	fb cf       	rjmp	.-10     	; 0x160 <lcd_puts+0x10>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 174:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 176:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 178:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 17a:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 17c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 17e:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 180:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	99 ef       	ldi	r25, 0xF9	; 249
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x16>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x1c>
 18c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 18e:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 190:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0x2a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0x30>
 1a0:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x3a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_init+0x40>
 1b0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x4a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_init+0x50>
 1c0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1c2:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x5c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_init+0x62>
 1d2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1e0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ea:	8c 2f       	mov	r24, r28
 1ec:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
}/* lcd_init */
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <main>:
    };
    
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_init>
    lcd_gotoxy(1, 0); lcd_puts("value:");
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 202:	88 e0       	ldi	r24, 0x08	; 8
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
    lcd_gotoxy(3, 1); lcd_puts("key:");
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	83 e0       	ldi	r24, 0x03	; 3
 20e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 212:	8f e0       	ldi	r24, 0x0F	; 15
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
    lcd_gotoxy(8, 0); lcd_puts("a");    // Put ADC value in decimal
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	88 e0       	ldi	r24, 0x08	; 8
 21e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 222:	84 e1       	ldi	r24, 0x14	; 20
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
    lcd_gotoxy(13,0); lcd_puts("b");    // Put ADC value in hexadecimal
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	8d e0       	ldi	r24, 0x0D	; 13
 22e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 232:	86 e1       	ldi	r24, 0x16	; 22
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
    lcd_gotoxy(8, 1); lcd_puts("c");    // Put button name here
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	88 e0       	ldi	r24, 0x08	; 8
 23e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 242:	88 e1       	ldi	r24, 0x18	; 24
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
    
//
    lcd_command(1 << LCD_CGRAM);
 24a:	80 e4       	ldi	r24, 0x40	; 64
 24c:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 250:	c0 e0       	ldi	r28, 0x00	; 0
 252:	d1 e0       	ldi	r29, 0x01	; 1
 254:	08 e0       	ldi	r16, 0x08	; 8
 256:	11 e0       	ldi	r17, 0x01	; 1
    for (uint8_t i = 0; i <8; i++)
    {
        // Store all new chars to memory line by line
        lcd_data(customChar[i]);
 258:	89 91       	ld	r24, Y+
 25a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
    lcd_gotoxy(13,0); lcd_puts("b");    // Put ADC value in hexadecimal
    lcd_gotoxy(8, 1); lcd_puts("c");    // Put button name here
    
//
    lcd_command(1 << LCD_CGRAM);
    for (uint8_t i = 0; i <8; i++)
 25e:	c0 17       	cp	r28, r16
 260:	d1 07       	cpc	r29, r17
 262:	d1 f7       	brne	.-12     	; 0x258 <main+0x64>
    {
        // Store all new chars to memory line by line
        lcd_data(customChar[i]);
    }
    // Set DDRAM address
    lcd_command(1 << LCD_DDRAM);
 264:	80 e8       	ldi	r24, 0x80	; 128
 266:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    
    // Display first custom character
    
    lcd_gotoxy(0, 1);
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    lcd_putc(0);
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
    lcd_gotoxy(1, 1);
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    lcd_putc(0);
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
   
//
    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
    ADMUX |=(1<<REFS0);
 286:	ec e7       	ldi	r30, 0x7C	; 124
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	80 64       	ori	r24, 0x40	; 64
 28e:	80 83       	st	Z, r24
    
    // Set input channel to ADC0
    ADMUX &= ~((1<MUX3) | (1<<MUX2)|| (1<<MUX1)| (1<<MUX0) );
 290:	80 81       	ld	r24, Z
 292:	8e 7f       	andi	r24, 0xFE	; 254
 294:	80 83       	st	Z, r24
    
    // Enable ADC module
    ADCSRA |= (1<<ADEN);
 296:	ea e7       	ldi	r30, 0x7A	; 122
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	80 68       	ori	r24, 0x80	; 128
 29e:	80 83       	st	Z, r24
    
    // Enable conversion complete interrupt
    ADCSRA |= (1<<ADIE);
 2a0:	80 81       	ld	r24, Z
 2a2:	88 60       	ori	r24, 0x08	; 8
 2a4:	80 83       	st	Z, r24
    
    // Set clock prescaler to 128
    ADCSRA |= (1<<ADPS2) | (1<<ADPS1) |(1<<ADPS0) ;
 2a6:	80 81       	ld	r24, Z
 2a8:	87 60       	ori	r24, 0x07	; 7
 2aa:	80 83       	st	Z, r24
    
    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Set prescaler to 262 ms and enable overflow interrupt
    TIM1_overflow_262ms();
 2ac:	e1 e8       	ldi	r30, 0x81	; 129
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	8b 7f       	andi	r24, 0xFB	; 251
 2b4:	80 83       	st	Z, r24
 2b6:	80 81       	ld	r24, Z
 2b8:	83 60       	ori	r24, 0x03	; 3
 2ba:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 2bc:	ef e6       	ldi	r30, 0x6F	; 111
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	81 60       	ori	r24, 0x01	; 1
 2c4:	80 83       	st	Z, r24
    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600,F_CPU));
 2c6:	87 e6       	ldi	r24, 0x67	; 103
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 98 02 	call	0x530	; 0x530 <uart_init>

    // Enables interrupts by setting the global interrupt mask
    sei();
 2ce:	78 94       	sei
 2d0:	ff cf       	rjmp	.-2      	; 0x2d0 <main+0xdc>

000002d2 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Use single conversion mode and start conversion four times
 *           per second.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 2d2:	1f 92       	push	r1
 2d4:	0f 92       	push	r0
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	0f 92       	push	r0
 2da:	11 24       	eor	r1, r1
 2dc:	8f 93       	push	r24
 2de:	ef 93       	push	r30
 2e0:	ff 93       	push	r31
    // Start ADC conversion
       ADCSRA |= (1<<ADSC);
 2e2:	ea e7       	ldi	r30, 0x7A	; 122
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	80 64       	ori	r24, 0x40	; 64
 2ea:	80 83       	st	Z, r24
    

}
 2ec:	ff 91       	pop	r31
 2ee:	ef 91       	pop	r30
 2f0:	8f 91       	pop	r24
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <__vector_21>:
/**********************************************************************
 * Function: ADC complete interrupt
 * Purpose:  Display value on LCD and send it to UART.
 **********************************************************************/
ISR(ADC_vect)
{
 2fc:	1f 92       	push	r1
 2fe:	0f 92       	push	r0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	0f 92       	push	r0
 304:	11 24       	eor	r1, r1
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	2f 93       	push	r18
 30c:	3f 93       	push	r19
 30e:	4f 93       	push	r20
 310:	5f 93       	push	r21
 312:	6f 93       	push	r22
 314:	7f 93       	push	r23
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	af 93       	push	r26
 31c:	bf 93       	push	r27
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	00 d0       	rcall	.+0      	; 0x328 <__vector_21+0x2c>
 328:	00 d0       	rcall	.+0      	; 0x32a <__vector_21+0x2e>
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
    uint16_t value = 0;
    char lcd_string[4] = "0000";
 32e:	80 e3       	ldi	r24, 0x30	; 48
 330:	90 e3       	ldi	r25, 0x30	; 48
 332:	9a 83       	std	Y+2, r25	; 0x02
 334:	89 83       	std	Y+1, r24	; 0x01
 336:	9c 83       	std	Y+4, r25	; 0x04
 338:	8b 83       	std	Y+3, r24	; 0x03

    value = ADC;                  // Copy ADC result to 16-bit variable
 33a:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 33e:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 342:	4a e0       	ldi	r20, 0x0A	; 10
 344:	be 01       	movw	r22, r28
 346:	6f 5f       	subi	r22, 0xFF	; 255
 348:	7f 4f       	sbci	r23, 0xFF	; 255
 34a:	c8 01       	movw	r24, r16
 34c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__itoa_ncheck>
    itoa(value, lcd_string, 10);  // Convert decimal value to string

    // WRITE YOUR CODE HERE
    
      //Clear previous value
      lcd_gotoxy(8,0);
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	88 e0       	ldi	r24, 0x08	; 8
 354:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
      lcd_puts("    ");
 358:	8a e1       	ldi	r24, 0x1A	; 26
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 
      
      //Put new value to LCD display
      lcd_gotoxy(8,0);
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	88 e0       	ldi	r24, 0x08	; 8
 364:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
      lcd_puts(lcd_string);
 368:	ce 01       	movw	r24, r28
 36a:	01 96       	adiw	r24, 0x01	; 1
 36c:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
      
      // send the same value to UART
      uart_puts(lcd_string);
 370:	ce 01       	movw	r24, r28
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	0e 94 c6 02 	call	0x58c	; 0x58c <uart_puts>
      uart_puts("\r\n");
 378:	8f e1       	ldi	r24, 0x1F	; 31
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	0e 94 c6 02 	call	0x58c	; 0x58c <uart_puts>
      
       
       //Clear previous value
       lcd_gotoxy(13,0);
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	8d e0       	ldi	r24, 0x0D	; 13
 384:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
       lcd_puts("    ");
 388:	8a e1       	ldi	r24, 0x1A	; 26
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 390:	40 e1       	ldi	r20, 0x10	; 16
 392:	be 01       	movw	r22, r28
 394:	6f 5f       	subi	r22, 0xFF	; 255
 396:	7f 4f       	sbci	r23, 0xFF	; 255
 398:	c8 01       	movw	r24, r16
 39a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__itoa_ncheck>
       //Put new value to LCD
       
       //display value in hex
       itoa(value, lcd_string, 16);    // Convert dec to string
       lcd_gotoxy(13,0);
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	8d e0       	ldi	r24, 0x0D	; 13
 3a2:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
       lcd_puts(lcd_string);
 3a6:	ce 01       	movw	r24, r28
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
       
       
       
       //display what button was pressed
       lcd_gotoxy(8,1);
 3ae:	61 e0       	ldi	r22, 0x01	; 1
 3b0:	88 e0       	ldi	r24, 0x08	; 8
 3b2:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
       lcd_puts("    ");
 3b6:	8a e1       	ldi	r24, 0x1A	; 26
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
       lcd_gotoxy(12,1);
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	8c e0       	ldi	r24, 0x0C	; 12
 3c2:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
       lcd_puts("    ");
 3c6:	8a e1       	ldi	r24, 0x1A	; 26
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
       
       
       lcd_gotoxy(8, 1);                // Copy ADC result to 16-bit variable
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	88 e0       	ldi	r24, 0x08	; 8
 3d2:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 3d6:	4a e0       	ldi	r20, 0x0A	; 10
 3d8:	be 01       	movw	r22, r28
 3da:	6f 5f       	subi	r22, 0xFF	; 255
 3dc:	7f 4f       	sbci	r23, 0xFF	; 255
 3de:	c8 01       	movw	r24, r16
 3e0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__itoa_ncheck>
       itoa(value, lcd_string, 10);     // Convert dec value to string
       
       if (value>1000) { lcd_puts("NONE");}
 3e4:	09 3e       	cpi	r16, 0xE9	; 233
 3e6:	23 e0       	ldi	r18, 0x03	; 3
 3e8:	12 07       	cpc	r17, r18
 3ea:	20 f0       	brcs	.+8      	; 0x3f4 <__vector_21+0xf8>
 3ec:	82 e2       	ldi	r24, 0x22	; 34
 3ee:	91 e0       	ldi	r25, 0x01	; 1
 3f0:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
       if ((value>600)&&(value<1000)) { lcd_puts("SELECT");}
 3f4:	c8 01       	movw	r24, r16
 3f6:	89 55       	subi	r24, 0x59	; 89
 3f8:	92 40       	sbci	r25, 0x02	; 2
 3fa:	8f 38       	cpi	r24, 0x8F	; 143
 3fc:	91 40       	sbci	r25, 0x01	; 1
 3fe:	20 f4       	brcc	.+8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 400:	87 e2       	ldi	r24, 0x27	; 39
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
       if ((value>350)&&(value<450)) { lcd_puts("LEFT");}
 408:	c8 01       	movw	r24, r16
 40a:	8f 55       	subi	r24, 0x5F	; 95
 40c:	91 40       	sbci	r25, 0x01	; 1
 40e:	83 36       	cpi	r24, 0x63	; 99
 410:	91 05       	cpc	r25, r1
 412:	20 f4       	brcc	.+8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 414:	8e e2       	ldi	r24, 0x2E	; 46
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
       if ((value>200)&&(value<270)) { lcd_puts("DOWN");}
 41c:	c8 01       	movw	r24, r16
 41e:	89 5c       	subi	r24, 0xC9	; 201
 420:	91 09       	sbc	r25, r1
 422:	85 34       	cpi	r24, 0x45	; 69
 424:	91 05       	cpc	r25, r1
 426:	20 f4       	brcc	.+8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 428:	83 e3       	ldi	r24, 0x33	; 51
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
       if ((value>5)&&(value<120)) { lcd_puts("UP");}
 430:	c8 01       	movw	r24, r16
 432:	06 97       	sbiw	r24, 0x06	; 6
 434:	82 37       	cpi	r24, 0x72	; 114
 436:	91 05       	cpc	r25, r1
 438:	20 f4       	brcc	.+8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43a:	88 e3       	ldi	r24, 0x38	; 56
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
       if (value==0) { lcd_puts("RIGHT");}
 442:	01 2b       	or	r16, r17
 444:	21 f4       	brne	.+8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 446:	8b e3       	ldi	r24, 0x3B	; 59
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
       ;
       
       
     
  }
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	0f 90       	pop	r0
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	ff 91       	pop	r31
 45c:	ef 91       	pop	r30
 45e:	bf 91       	pop	r27
 460:	af 91       	pop	r26
 462:	9f 91       	pop	r25
 464:	8f 91       	pop	r24
 466:	7f 91       	pop	r23
 468:	6f 91       	pop	r22
 46a:	5f 91       	pop	r21
 46c:	4f 91       	pop	r20
 46e:	3f 91       	pop	r19
 470:	2f 91       	pop	r18
 472:	1f 91       	pop	r17
 474:	0f 91       	pop	r16
 476:	0f 90       	pop	r0
 478:	0f be       	out	0x3f, r0	; 63
 47a:	0f 90       	pop	r0
 47c:	1f 90       	pop	r1
 47e:	18 95       	reti

00000480 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 480:	1f 92       	push	r1
 482:	0f 92       	push	r0
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	0f 92       	push	r0
 488:	11 24       	eor	r1, r1
 48a:	2f 93       	push	r18
 48c:	8f 93       	push	r24
 48e:	9f 93       	push	r25
 490:	ef 93       	push	r30
 492:	ff 93       	push	r31
 494:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 498:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 49c:	8c 71       	andi	r24, 0x1C	; 28
 49e:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <UART_RxHead>
 4a2:	ef 5f       	subi	r30, 0xFF	; 255
 4a4:	ef 71       	andi	r30, 0x1F	; 31
 4a6:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <UART_RxTail>
 4aa:	e9 17       	cp	r30, r25
 4ac:	39 f0       	breq	.+14     	; 0x4bc <__vector_18+0x3c>
 4ae:	e0 93 44 01 	sts	0x0144, r30	; 0x800144 <UART_RxHead>
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	e9 5b       	subi	r30, 0xB9	; 185
 4b6:	fe 4f       	sbci	r31, 0xFE	; 254
 4b8:	20 83       	st	Z, r18
 4ba:	01 c0       	rjmp	.+2      	; 0x4be <__vector_18+0x3e>
 4bc:	82 e0       	ldi	r24, 0x02	; 2
 4be:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__data_end>
 4c2:	89 2b       	or	r24, r25
 4c4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
 4c8:	ff 91       	pop	r31
 4ca:	ef 91       	pop	r30
 4cc:	9f 91       	pop	r25
 4ce:	8f 91       	pop	r24
 4d0:	2f 91       	pop	r18
 4d2:	0f 90       	pop	r0
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	0f 90       	pop	r0
 4d8:	1f 90       	pop	r1
 4da:	18 95       	reti

000004dc <__vector_19>:
 4dc:	1f 92       	push	r1
 4de:	0f 92       	push	r0
 4e0:	0f b6       	in	r0, 0x3f	; 63
 4e2:	0f 92       	push	r0
 4e4:	11 24       	eor	r1, r1
 4e6:	8f 93       	push	r24
 4e8:	9f 93       	push	r25
 4ea:	ef 93       	push	r30
 4ec:	ff 93       	push	r31
 4ee:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <UART_TxHead>
 4f2:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <UART_TxTail>
 4f6:	98 17       	cp	r25, r24
 4f8:	69 f0       	breq	.+26     	; 0x514 <__vector_19+0x38>
 4fa:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <UART_TxTail>
 4fe:	ef 5f       	subi	r30, 0xFF	; 255
 500:	ef 71       	andi	r30, 0x1F	; 31
 502:	e0 93 45 01 	sts	0x0145, r30	; 0x800145 <UART_TxTail>
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	e9 59       	subi	r30, 0x99	; 153
 50a:	fe 4f       	sbci	r31, 0xFE	; 254
 50c:	80 81       	ld	r24, Z
 50e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 512:	05 c0       	rjmp	.+10     	; 0x51e <__vector_19+0x42>
 514:	e1 ec       	ldi	r30, 0xC1	; 193
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	80 81       	ld	r24, Z
 51a:	8f 7d       	andi	r24, 0xDF	; 223
 51c:	80 83       	st	Z, r24
 51e:	ff 91       	pop	r31
 520:	ef 91       	pop	r30
 522:	9f 91       	pop	r25
 524:	8f 91       	pop	r24
 526:	0f 90       	pop	r0
 528:	0f be       	out	0x3f, r0	; 63
 52a:	0f 90       	pop	r0
 52c:	1f 90       	pop	r1
 52e:	18 95       	reti

00000530 <uart_init>:
 530:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <UART_TxHead>
 534:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <UART_TxTail>
 538:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <UART_RxHead>
 53c:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <UART_RxTail>
 540:	99 23       	and	r25, r25
 542:	1c f4       	brge	.+6      	; 0x54a <uart_init+0x1a>
 544:	22 e0       	ldi	r18, 0x02	; 2
 546:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 54a:	90 78       	andi	r25, 0x80	; 128
 54c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 550:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 554:	88 e9       	ldi	r24, 0x98	; 152
 556:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 55a:	86 e0       	ldi	r24, 0x06	; 6
 55c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 560:	08 95       	ret

00000562 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 562:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <UART_TxHead>
 566:	2f 5f       	subi	r18, 0xFF	; 255
 568:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 56a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <UART_TxTail>
 56e:	29 17       	cp	r18, r25
 570:	e1 f3       	breq	.-8      	; 0x56a <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 572:	e2 2f       	mov	r30, r18
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	e9 59       	subi	r30, 0x99	; 153
 578:	fe 4f       	sbci	r31, 0xFE	; 254
 57a:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 57c:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 580:	e1 ec       	ldi	r30, 0xC1	; 193
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	80 62       	ori	r24, 0x20	; 32
 588:	80 83       	st	Z, r24
 58a:	08 95       	ret

0000058c <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	ec 01       	movw	r28, r24
    while (*s)
 592:	88 81       	ld	r24, Y
 594:	88 23       	and	r24, r24
 596:	31 f0       	breq	.+12     	; 0x5a4 <uart_puts+0x18>
 598:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 59a:	0e 94 b1 02 	call	0x562	; 0x562 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 59e:	89 91       	ld	r24, Y+
 5a0:	81 11       	cpse	r24, r1
 5a2:	fb cf       	rjmp	.-10     	; 0x59a <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	08 95       	ret

000005aa <__itoa_ncheck>:
 5aa:	bb 27       	eor	r27, r27
 5ac:	4a 30       	cpi	r20, 0x0A	; 10
 5ae:	31 f4       	brne	.+12     	; 0x5bc <__itoa_ncheck+0x12>
 5b0:	99 23       	and	r25, r25
 5b2:	22 f4       	brpl	.+8      	; 0x5bc <__itoa_ncheck+0x12>
 5b4:	bd e2       	ldi	r27, 0x2D	; 45
 5b6:	90 95       	com	r25
 5b8:	81 95       	neg	r24
 5ba:	9f 4f       	sbci	r25, 0xFF	; 255
 5bc:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__utoa_common>

000005c0 <__utoa_ncheck>:
 5c0:	bb 27       	eor	r27, r27

000005c2 <__utoa_common>:
 5c2:	fb 01       	movw	r30, r22
 5c4:	55 27       	eor	r21, r21
 5c6:	aa 27       	eor	r26, r26
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	aa 1f       	adc	r26, r26
 5ce:	a4 17       	cp	r26, r20
 5d0:	10 f0       	brcs	.+4      	; 0x5d6 <__utoa_common+0x14>
 5d2:	a4 1b       	sub	r26, r20
 5d4:	83 95       	inc	r24
 5d6:	50 51       	subi	r21, 0x10	; 16
 5d8:	b9 f7       	brne	.-18     	; 0x5c8 <__utoa_common+0x6>
 5da:	a0 5d       	subi	r26, 0xD0	; 208
 5dc:	aa 33       	cpi	r26, 0x3A	; 58
 5de:	08 f0       	brcs	.+2      	; 0x5e2 <__utoa_common+0x20>
 5e0:	a9 5d       	subi	r26, 0xD9	; 217
 5e2:	a1 93       	st	Z+, r26
 5e4:	00 97       	sbiw	r24, 0x00	; 0
 5e6:	79 f7       	brne	.-34     	; 0x5c6 <__utoa_common+0x4>
 5e8:	b1 11       	cpse	r27, r1
 5ea:	b1 93       	st	Z+, r27
 5ec:	11 92       	st	Z+, r1
 5ee:	cb 01       	movw	r24, r22
 5f0:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <strrev>

000005f4 <strrev>:
 5f4:	dc 01       	movw	r26, r24
 5f6:	fc 01       	movw	r30, r24
 5f8:	67 2f       	mov	r22, r23
 5fa:	71 91       	ld	r23, Z+
 5fc:	77 23       	and	r23, r23
 5fe:	e1 f7       	brne	.-8      	; 0x5f8 <strrev+0x4>
 600:	32 97       	sbiw	r30, 0x02	; 2
 602:	04 c0       	rjmp	.+8      	; 0x60c <strrev+0x18>
 604:	7c 91       	ld	r23, X
 606:	6d 93       	st	X+, r22
 608:	70 83       	st	Z, r23
 60a:	62 91       	ld	r22, -Z
 60c:	ae 17       	cp	r26, r30
 60e:	bf 07       	cpc	r27, r31
 610:	c8 f3       	brcs	.-14     	; 0x604 <strrev+0x10>
 612:	08 95       	ret

00000614 <_exit>:
 614:	f8 94       	cli

00000616 <__stop_program>:
 616:	ff cf       	rjmp	.-2      	; 0x616 <__stop_program>
